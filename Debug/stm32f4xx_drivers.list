
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c50  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000004  08000df8  08000df8  00010df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000dfc  08000dfc  00020464  2**0
                  CONTENTS
  4 .ARM          00000000  08000dfc  08000dfc  00020464  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000dfc  08000dfc  00020464  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08000dfc  08000dfc  00010dfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e04  08000e04  00010e04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000464  20000000  08000e08  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000050  20000464  0800126c  00020464  2**2
                  ALLOC
 10 ._user_heap_stack 00000404  200004b4  0800126c  000204b4  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020464  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002136  00000000  00000000  0002048e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000068c  00000000  00000000  000225c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001f0  00000000  00000000  00022c50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000001a8  00000000  00000000  00022e40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002d43  00000000  00000000  00022fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001a58  00000000  00000000  00025d2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000ab50  00000000  00000000  00027783  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000322d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000008b8  00000000  00000000  00032350  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000464 	.word	0x20000464
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000de0 	.word	0x08000de0

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000468 	.word	0x20000468
 80001e4:	08000de0 	.word	0x08000de0

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <GPIO_PeriClockControl>:
 *
 * @Note              -  none

 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80001f8:	b480      	push	{r7}
 80001fa:	b083      	sub	sp, #12
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
 8000200:	460b      	mov	r3, r1
 8000202:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000204:	78fb      	ldrb	r3, [r7, #3]
 8000206:	2b01      	cmp	r3, #1
 8000208:	d161      	bne.n	80002ce <GPIO_PeriClockControl+0xd6>
	{
		if(pGPIOx == GPIOA)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	4a32      	ldr	r2, [pc, #200]	; (80002d8 <GPIO_PeriClockControl+0xe0>)
 800020e:	4293      	cmp	r3, r2
 8000210:	d106      	bne.n	8000220 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000212:	4b32      	ldr	r3, [pc, #200]	; (80002dc <GPIO_PeriClockControl+0xe4>)
 8000214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000216:	4a31      	ldr	r2, [pc, #196]	; (80002dc <GPIO_PeriClockControl+0xe4>)
 8000218:	f043 0301 	orr.w	r3, r3, #1
 800021c:	6313      	str	r3, [r2, #48]	; 0x30
	else
	{
		//TODO
	}

}
 800021e:	e056      	b.n	80002ce <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOB)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	4a2f      	ldr	r2, [pc, #188]	; (80002e0 <GPIO_PeriClockControl+0xe8>)
 8000224:	4293      	cmp	r3, r2
 8000226:	d106      	bne.n	8000236 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000228:	4b2c      	ldr	r3, [pc, #176]	; (80002dc <GPIO_PeriClockControl+0xe4>)
 800022a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800022c:	4a2b      	ldr	r2, [pc, #172]	; (80002dc <GPIO_PeriClockControl+0xe4>)
 800022e:	f043 0302 	orr.w	r3, r3, #2
 8000232:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000234:	e04b      	b.n	80002ce <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOC)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	4a2a      	ldr	r2, [pc, #168]	; (80002e4 <GPIO_PeriClockControl+0xec>)
 800023a:	4293      	cmp	r3, r2
 800023c:	d106      	bne.n	800024c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800023e:	4b27      	ldr	r3, [pc, #156]	; (80002dc <GPIO_PeriClockControl+0xe4>)
 8000240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000242:	4a26      	ldr	r2, [pc, #152]	; (80002dc <GPIO_PeriClockControl+0xe4>)
 8000244:	f043 0304 	orr.w	r3, r3, #4
 8000248:	6313      	str	r3, [r2, #48]	; 0x30
}
 800024a:	e040      	b.n	80002ce <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOD)
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	4a26      	ldr	r2, [pc, #152]	; (80002e8 <GPIO_PeriClockControl+0xf0>)
 8000250:	4293      	cmp	r3, r2
 8000252:	d106      	bne.n	8000262 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000254:	4b21      	ldr	r3, [pc, #132]	; (80002dc <GPIO_PeriClockControl+0xe4>)
 8000256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000258:	4a20      	ldr	r2, [pc, #128]	; (80002dc <GPIO_PeriClockControl+0xe4>)
 800025a:	f043 0308 	orr.w	r3, r3, #8
 800025e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000260:	e035      	b.n	80002ce <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOE)
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	4a21      	ldr	r2, [pc, #132]	; (80002ec <GPIO_PeriClockControl+0xf4>)
 8000266:	4293      	cmp	r3, r2
 8000268:	d106      	bne.n	8000278 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800026a:	4b1c      	ldr	r3, [pc, #112]	; (80002dc <GPIO_PeriClockControl+0xe4>)
 800026c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800026e:	4a1b      	ldr	r2, [pc, #108]	; (80002dc <GPIO_PeriClockControl+0xe4>)
 8000270:	f043 0310 	orr.w	r3, r3, #16
 8000274:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000276:	e02a      	b.n	80002ce <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOF)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	4a1d      	ldr	r2, [pc, #116]	; (80002f0 <GPIO_PeriClockControl+0xf8>)
 800027c:	4293      	cmp	r3, r2
 800027e:	d106      	bne.n	800028e <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000280:	4b16      	ldr	r3, [pc, #88]	; (80002dc <GPIO_PeriClockControl+0xe4>)
 8000282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000284:	4a15      	ldr	r2, [pc, #84]	; (80002dc <GPIO_PeriClockControl+0xe4>)
 8000286:	f043 0320 	orr.w	r3, r3, #32
 800028a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800028c:	e01f      	b.n	80002ce <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOG)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	4a18      	ldr	r2, [pc, #96]	; (80002f4 <GPIO_PeriClockControl+0xfc>)
 8000292:	4293      	cmp	r3, r2
 8000294:	d106      	bne.n	80002a4 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000296:	4b11      	ldr	r3, [pc, #68]	; (80002dc <GPIO_PeriClockControl+0xe4>)
 8000298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800029a:	4a10      	ldr	r2, [pc, #64]	; (80002dc <GPIO_PeriClockControl+0xe4>)
 800029c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002a0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002a2:	e014      	b.n	80002ce <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOH)
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	4a14      	ldr	r2, [pc, #80]	; (80002f8 <GPIO_PeriClockControl+0x100>)
 80002a8:	4293      	cmp	r3, r2
 80002aa:	d106      	bne.n	80002ba <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 80002ac:	4b0b      	ldr	r3, [pc, #44]	; (80002dc <GPIO_PeriClockControl+0xe4>)
 80002ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b0:	4a0a      	ldr	r2, [pc, #40]	; (80002dc <GPIO_PeriClockControl+0xe4>)
 80002b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002b6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002b8:	e009      	b.n	80002ce <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOI)
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	4a0f      	ldr	r2, [pc, #60]	; (80002fc <GPIO_PeriClockControl+0x104>)
 80002be:	4293      	cmp	r3, r2
 80002c0:	d105      	bne.n	80002ce <GPIO_PeriClockControl+0xd6>
			GPIOI_PCLK_EN();
 80002c2:	4b06      	ldr	r3, [pc, #24]	; (80002dc <GPIO_PeriClockControl+0xe4>)
 80002c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002c6:	4a05      	ldr	r2, [pc, #20]	; (80002dc <GPIO_PeriClockControl+0xe4>)
 80002c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002cc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002ce:	bf00      	nop
 80002d0:	370c      	adds	r7, #12
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bc80      	pop	{r7}
 80002d6:	4770      	bx	lr
 80002d8:	40020000 	.word	0x40020000
 80002dc:	40023800 	.word	0x40023800
 80002e0:	40020400 	.word	0x40020400
 80002e4:	40020800 	.word	0x40020800
 80002e8:	40020c00 	.word	0x40020c00
 80002ec:	40021000 	.word	0x40021000
 80002f0:	40021400 	.word	0x40021400
 80002f4:	40021800 	.word	0x40021800
 80002f8:	40021c00 	.word	0x40021c00
 80002fc:	40022000 	.word	0x40022000

08000300 <GPIO_Init>:
 *
 * @Note              -

 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b086      	sub	sp, #24
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
	 uint32_t temp=0; //temp. register
 8000308:	2300      	movs	r3, #0
 800030a:	617b      	str	r3, [r7, #20]

	 //enable the peripheral clock

	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	2101      	movs	r1, #1
 8000312:	4618      	mov	r0, r3
 8000314:	f7ff ff70 	bl	80001f8 <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	795b      	ldrb	r3, [r3, #5]
 800031c:	2b03      	cmp	r3, #3
 800031e:	d820      	bhi.n	8000362 <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	795b      	ldrb	r3, [r3, #5]
 8000324:	461a      	mov	r2, r3
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	791b      	ldrb	r3, [r3, #4]
 800032a:	005b      	lsls	r3, r3, #1
 800032c:	fa02 f303 	lsl.w	r3, r2, r3
 8000330:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	681a      	ldr	r2, [r3, #0]
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	791b      	ldrb	r3, [r3, #4]
 800033c:	005b      	lsls	r3, r3, #1
 800033e:	2103      	movs	r1, #3
 8000340:	fa01 f303 	lsl.w	r3, r1, r3
 8000344:	43db      	mvns	r3, r3
 8000346:	4619      	mov	r1, r3
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	400a      	ands	r2, r1
 800034e:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	6819      	ldr	r1, [r3, #0]
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	697a      	ldr	r2, [r7, #20]
 800035c:	430a      	orrs	r2, r1
 800035e:	601a      	str	r2, [r3, #0]
 8000360:	e0cb      	b.n	80004fa <GPIO_Init+0x1fa>

	}else
	{
		//this part will code later . ( interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT )
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	795b      	ldrb	r3, [r3, #5]
 8000366:	2b04      	cmp	r3, #4
 8000368:	d117      	bne.n	800039a <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800036a:	4b4b      	ldr	r3, [pc, #300]	; (8000498 <GPIO_Init+0x198>)
 800036c:	68db      	ldr	r3, [r3, #12]
 800036e:	687a      	ldr	r2, [r7, #4]
 8000370:	7912      	ldrb	r2, [r2, #4]
 8000372:	4611      	mov	r1, r2
 8000374:	2201      	movs	r2, #1
 8000376:	408a      	lsls	r2, r1
 8000378:	4611      	mov	r1, r2
 800037a:	4a47      	ldr	r2, [pc, #284]	; (8000498 <GPIO_Init+0x198>)
 800037c:	430b      	orrs	r3, r1
 800037e:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000380:	4b45      	ldr	r3, [pc, #276]	; (8000498 <GPIO_Init+0x198>)
 8000382:	689b      	ldr	r3, [r3, #8]
 8000384:	687a      	ldr	r2, [r7, #4]
 8000386:	7912      	ldrb	r2, [r2, #4]
 8000388:	4611      	mov	r1, r2
 800038a:	2201      	movs	r2, #1
 800038c:	408a      	lsls	r2, r1
 800038e:	43d2      	mvns	r2, r2
 8000390:	4611      	mov	r1, r2
 8000392:	4a41      	ldr	r2, [pc, #260]	; (8000498 <GPIO_Init+0x198>)
 8000394:	400b      	ands	r3, r1
 8000396:	6093      	str	r3, [r2, #8]
 8000398:	e035      	b.n	8000406 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT )
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	795b      	ldrb	r3, [r3, #5]
 800039e:	2b05      	cmp	r3, #5
 80003a0:	d117      	bne.n	80003d2 <GPIO_Init+0xd2>
		{
			//1 . configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003a2:	4b3d      	ldr	r3, [pc, #244]	; (8000498 <GPIO_Init+0x198>)
 80003a4:	689b      	ldr	r3, [r3, #8]
 80003a6:	687a      	ldr	r2, [r7, #4]
 80003a8:	7912      	ldrb	r2, [r2, #4]
 80003aa:	4611      	mov	r1, r2
 80003ac:	2201      	movs	r2, #1
 80003ae:	408a      	lsls	r2, r1
 80003b0:	4611      	mov	r1, r2
 80003b2:	4a39      	ldr	r2, [pc, #228]	; (8000498 <GPIO_Init+0x198>)
 80003b4:	430b      	orrs	r3, r1
 80003b6:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003b8:	4b37      	ldr	r3, [pc, #220]	; (8000498 <GPIO_Init+0x198>)
 80003ba:	68db      	ldr	r3, [r3, #12]
 80003bc:	687a      	ldr	r2, [r7, #4]
 80003be:	7912      	ldrb	r2, [r2, #4]
 80003c0:	4611      	mov	r1, r2
 80003c2:	2201      	movs	r2, #1
 80003c4:	408a      	lsls	r2, r1
 80003c6:	43d2      	mvns	r2, r2
 80003c8:	4611      	mov	r1, r2
 80003ca:	4a33      	ldr	r2, [pc, #204]	; (8000498 <GPIO_Init+0x198>)
 80003cc:	400b      	ands	r3, r1
 80003ce:	60d3      	str	r3, [r2, #12]
 80003d0:	e019      	b.n	8000406 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	795b      	ldrb	r3, [r3, #5]
 80003d6:	2b06      	cmp	r3, #6
 80003d8:	d115      	bne.n	8000406 <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003da:	4b2f      	ldr	r3, [pc, #188]	; (8000498 <GPIO_Init+0x198>)
 80003dc:	689b      	ldr	r3, [r3, #8]
 80003de:	687a      	ldr	r2, [r7, #4]
 80003e0:	7912      	ldrb	r2, [r2, #4]
 80003e2:	4611      	mov	r1, r2
 80003e4:	2201      	movs	r2, #1
 80003e6:	408a      	lsls	r2, r1
 80003e8:	4611      	mov	r1, r2
 80003ea:	4a2b      	ldr	r2, [pc, #172]	; (8000498 <GPIO_Init+0x198>)
 80003ec:	430b      	orrs	r3, r1
 80003ee:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003f0:	4b29      	ldr	r3, [pc, #164]	; (8000498 <GPIO_Init+0x198>)
 80003f2:	68db      	ldr	r3, [r3, #12]
 80003f4:	687a      	ldr	r2, [r7, #4]
 80003f6:	7912      	ldrb	r2, [r2, #4]
 80003f8:	4611      	mov	r1, r2
 80003fa:	2201      	movs	r2, #1
 80003fc:	408a      	lsls	r2, r1
 80003fe:	4611      	mov	r1, r2
 8000400:	4a25      	ldr	r2, [pc, #148]	; (8000498 <GPIO_Init+0x198>)
 8000402:	430b      	orrs	r3, r1
 8000404:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	791b      	ldrb	r3, [r3, #4]
 800040a:	089b      	lsrs	r3, r3, #2
 800040c:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	791b      	ldrb	r3, [r3, #4]
 8000412:	f003 0303 	and.w	r3, r3, #3
 8000416:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	4a1f      	ldr	r2, [pc, #124]	; (800049c <GPIO_Init+0x19c>)
 800041e:	4293      	cmp	r3, r2
 8000420:	d04e      	beq.n	80004c0 <GPIO_Init+0x1c0>
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	4a1e      	ldr	r2, [pc, #120]	; (80004a0 <GPIO_Init+0x1a0>)
 8000428:	4293      	cmp	r3, r2
 800042a:	d032      	beq.n	8000492 <GPIO_Init+0x192>
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	4a1c      	ldr	r2, [pc, #112]	; (80004a4 <GPIO_Init+0x1a4>)
 8000432:	4293      	cmp	r3, r2
 8000434:	d02b      	beq.n	800048e <GPIO_Init+0x18e>
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	4a1b      	ldr	r2, [pc, #108]	; (80004a8 <GPIO_Init+0x1a8>)
 800043c:	4293      	cmp	r3, r2
 800043e:	d024      	beq.n	800048a <GPIO_Init+0x18a>
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	4a19      	ldr	r2, [pc, #100]	; (80004ac <GPIO_Init+0x1ac>)
 8000446:	4293      	cmp	r3, r2
 8000448:	d01d      	beq.n	8000486 <GPIO_Init+0x186>
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	4a18      	ldr	r2, [pc, #96]	; (80004b0 <GPIO_Init+0x1b0>)
 8000450:	4293      	cmp	r3, r2
 8000452:	d016      	beq.n	8000482 <GPIO_Init+0x182>
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	4a16      	ldr	r2, [pc, #88]	; (80004b4 <GPIO_Init+0x1b4>)
 800045a:	4293      	cmp	r3, r2
 800045c:	d00f      	beq.n	800047e <GPIO_Init+0x17e>
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	4a15      	ldr	r2, [pc, #84]	; (80004b8 <GPIO_Init+0x1b8>)
 8000464:	4293      	cmp	r3, r2
 8000466:	d008      	beq.n	800047a <GPIO_Init+0x17a>
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4a13      	ldr	r2, [pc, #76]	; (80004bc <GPIO_Init+0x1bc>)
 800046e:	4293      	cmp	r3, r2
 8000470:	d101      	bne.n	8000476 <GPIO_Init+0x176>
 8000472:	2308      	movs	r3, #8
 8000474:	e025      	b.n	80004c2 <GPIO_Init+0x1c2>
 8000476:	2300      	movs	r3, #0
 8000478:	e023      	b.n	80004c2 <GPIO_Init+0x1c2>
 800047a:	2307      	movs	r3, #7
 800047c:	e021      	b.n	80004c2 <GPIO_Init+0x1c2>
 800047e:	2306      	movs	r3, #6
 8000480:	e01f      	b.n	80004c2 <GPIO_Init+0x1c2>
 8000482:	2305      	movs	r3, #5
 8000484:	e01d      	b.n	80004c2 <GPIO_Init+0x1c2>
 8000486:	2304      	movs	r3, #4
 8000488:	e01b      	b.n	80004c2 <GPIO_Init+0x1c2>
 800048a:	2303      	movs	r3, #3
 800048c:	e019      	b.n	80004c2 <GPIO_Init+0x1c2>
 800048e:	2302      	movs	r3, #2
 8000490:	e017      	b.n	80004c2 <GPIO_Init+0x1c2>
 8000492:	2301      	movs	r3, #1
 8000494:	e015      	b.n	80004c2 <GPIO_Init+0x1c2>
 8000496:	bf00      	nop
 8000498:	40013c00 	.word	0x40013c00
 800049c:	40020000 	.word	0x40020000
 80004a0:	40020400 	.word	0x40020400
 80004a4:	40020800 	.word	0x40020800
 80004a8:	40020c00 	.word	0x40020c00
 80004ac:	40021000 	.word	0x40021000
 80004b0:	40021400 	.word	0x40021400
 80004b4:	40021800 	.word	0x40021800
 80004b8:	40021c00 	.word	0x40021c00
 80004bc:	40022000 	.word	0x40022000
 80004c0:	2300      	movs	r3, #0
 80004c2:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80004c4:	4b59      	ldr	r3, [pc, #356]	; (800062c <GPIO_Init+0x32c>)
 80004c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004c8:	4a58      	ldr	r2, [pc, #352]	; (800062c <GPIO_Init+0x32c>)
 80004ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004ce:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 80004d0:	7c7a      	ldrb	r2, [r7, #17]
 80004d2:	7cbb      	ldrb	r3, [r7, #18]
 80004d4:	009b      	lsls	r3, r3, #2
 80004d6:	fa02 f103 	lsl.w	r1, r2, r3
 80004da:	4a55      	ldr	r2, [pc, #340]	; (8000630 <GPIO_Init+0x330>)
 80004dc:	7cfb      	ldrb	r3, [r7, #19]
 80004de:	3302      	adds	r3, #2
 80004e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80004e4:	4b53      	ldr	r3, [pc, #332]	; (8000634 <GPIO_Init+0x334>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	687a      	ldr	r2, [r7, #4]
 80004ea:	7912      	ldrb	r2, [r2, #4]
 80004ec:	4611      	mov	r1, r2
 80004ee:	2201      	movs	r2, #1
 80004f0:	408a      	lsls	r2, r1
 80004f2:	4611      	mov	r1, r2
 80004f4:	4a4f      	ldr	r2, [pc, #316]	; (8000634 <GPIO_Init+0x334>)
 80004f6:	430b      	orrs	r3, r1
 80004f8:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	799b      	ldrb	r3, [r3, #6]
 80004fe:	461a      	mov	r2, r3
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	791b      	ldrb	r3, [r3, #4]
 8000504:	005b      	lsls	r3, r3, #1
 8000506:	fa02 f303 	lsl.w	r3, r2, r3
 800050a:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	689a      	ldr	r2, [r3, #8]
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	791b      	ldrb	r3, [r3, #4]
 8000516:	005b      	lsls	r3, r3, #1
 8000518:	2103      	movs	r1, #3
 800051a:	fa01 f303 	lsl.w	r3, r1, r3
 800051e:	43db      	mvns	r3, r3
 8000520:	4619      	mov	r1, r3
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	400a      	ands	r2, r1
 8000528:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	6899      	ldr	r1, [r3, #8]
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	697a      	ldr	r2, [r7, #20]
 8000536:	430a      	orrs	r2, r1
 8000538:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	79db      	ldrb	r3, [r3, #7]
 800053e:	461a      	mov	r2, r3
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	791b      	ldrb	r3, [r3, #4]
 8000544:	005b      	lsls	r3, r3, #1
 8000546:	fa02 f303 	lsl.w	r3, r2, r3
 800054a:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	68da      	ldr	r2, [r3, #12]
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	791b      	ldrb	r3, [r3, #4]
 8000556:	005b      	lsls	r3, r3, #1
 8000558:	2103      	movs	r1, #3
 800055a:	fa01 f303 	lsl.w	r3, r1, r3
 800055e:	43db      	mvns	r3, r3
 8000560:	4619      	mov	r1, r3
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	400a      	ands	r2, r1
 8000568:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	68d9      	ldr	r1, [r3, #12]
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	697a      	ldr	r2, [r7, #20]
 8000576:	430a      	orrs	r2, r1
 8000578:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	7a1b      	ldrb	r3, [r3, #8]
 800057e:	461a      	mov	r2, r3
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	791b      	ldrb	r3, [r3, #4]
 8000584:	fa02 f303 	lsl.w	r3, r2, r3
 8000588:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	685a      	ldr	r2, [r3, #4]
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	791b      	ldrb	r3, [r3, #4]
 8000594:	4619      	mov	r1, r3
 8000596:	2301      	movs	r3, #1
 8000598:	408b      	lsls	r3, r1
 800059a:	43db      	mvns	r3, r3
 800059c:	4619      	mov	r1, r3
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	400a      	ands	r2, r1
 80005a4:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	6859      	ldr	r1, [r3, #4]
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	697a      	ldr	r2, [r7, #20]
 80005b2:	430a      	orrs	r2, r1
 80005b4:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	795b      	ldrb	r3, [r3, #5]
 80005ba:	2b02      	cmp	r3, #2
 80005bc:	d131      	bne.n	8000622 <GPIO_Init+0x322>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	791b      	ldrb	r3, [r3, #4]
 80005c2:	08db      	lsrs	r3, r3, #3
 80005c4:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	791b      	ldrb	r3, [r3, #4]
 80005ca:	f003 0307 	and.w	r3, r3, #7
 80005ce:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	7c3a      	ldrb	r2, [r7, #16]
 80005d6:	3208      	adds	r2, #8
 80005d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80005dc:	7bfb      	ldrb	r3, [r7, #15]
 80005de:	009b      	lsls	r3, r3, #2
 80005e0:	220f      	movs	r2, #15
 80005e2:	fa02 f303 	lsl.w	r3, r2, r3
 80005e6:	43db      	mvns	r3, r3
 80005e8:	4618      	mov	r0, r3
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	7c3a      	ldrb	r2, [r7, #16]
 80005f0:	4001      	ands	r1, r0
 80005f2:	3208      	adds	r2, #8
 80005f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	7c3a      	ldrb	r2, [r7, #16]
 80005fe:	3208      	adds	r2, #8
 8000600:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	7a5b      	ldrb	r3, [r3, #9]
 8000608:	461a      	mov	r2, r3
 800060a:	7bfb      	ldrb	r3, [r7, #15]
 800060c:	009b      	lsls	r3, r3, #2
 800060e:	fa02 f303 	lsl.w	r3, r2, r3
 8000612:	4618      	mov	r0, r3
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	7c3a      	ldrb	r2, [r7, #16]
 800061a:	4301      	orrs	r1, r0
 800061c:	3208      	adds	r2, #8
 800061e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8000622:	bf00      	nop
 8000624:	3718      	adds	r7, #24
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40023800 	.word	0x40023800
 8000630:	40013800 	.word	0x40013800
 8000634:	40013c00 	.word	0x40013c00

08000638 <GPIO_ReadFromInputPin>:
 *
 * @Note              -

 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000638:	b480      	push	{r7}
 800063a:	b085      	sub	sp, #20
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
 8000640:	460b      	mov	r3, r1
 8000642:	70fb      	strb	r3, [r7, #3]
   uint8_t value;

   value = (uint8_t )((pGPIOx->IDR  >> PinNumber) & 0x00000001 ) ;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	691a      	ldr	r2, [r3, #16]
 8000648:	78fb      	ldrb	r3, [r7, #3]
 800064a:	fa22 f303 	lsr.w	r3, r2, r3
 800064e:	b2db      	uxtb	r3, r3
 8000650:	f003 0301 	and.w	r3, r3, #1
 8000654:	73fb      	strb	r3, [r7, #15]

   return value;
 8000656:	7bfb      	ldrb	r3, [r7, #15]
}
 8000658:	4618      	mov	r0, r3
 800065a:	3714      	adds	r7, #20
 800065c:	46bd      	mov	sp, r7
 800065e:	bc80      	pop	{r7}
 8000660:	4770      	bx	lr

08000662 <I2C_GenerateStartCondition>:

static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle );
static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle );

static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 8000662:	b480      	push	{r7}
 8000664:	b083      	sub	sp, #12
 8000666:	af00      	add	r7, sp, #0
 8000668:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_START);
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	601a      	str	r2, [r3, #0]
}
 8000676:	bf00      	nop
 8000678:	370c      	adds	r7, #12
 800067a:	46bd      	mov	sp, r7
 800067c:	bc80      	pop	{r7}
 800067e:	4770      	bx	lr

08000680 <I2C_ExecuteAddressPhaseWrite>:



static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
 8000688:	460b      	mov	r3, r1
 800068a:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 800068c:	78fb      	ldrb	r3, [r7, #3]
 800068e:	005b      	lsls	r3, r3, #1
 8000690:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1); //SlaveAddr is Slave address + r/nw bit=0
 8000692:	78fb      	ldrb	r3, [r7, #3]
 8000694:	f023 0301 	bic.w	r3, r3, #1
 8000698:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 800069a:	78fa      	ldrb	r2, [r7, #3]
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	611a      	str	r2, [r3, #16]
}
 80006a0:	bf00      	nop
 80006a2:	370c      	adds	r7, #12
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bc80      	pop	{r7}
 80006a8:	4770      	bx	lr

080006aa <I2C_ClearADDRFlag>:
	pI2Cx->DR = SlaveAddr;
}


static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle )
{
 80006aa:	b580      	push	{r7, lr}
 80006ac:	b084      	sub	sp, #16
 80006ae:	af00      	add	r7, sp, #0
 80006b0:	6078      	str	r0, [r7, #4]
	uint32_t dummy_read;
	//check for device mode
	if(pI2CHandle->pI2Cx->SR2 & ( 1 << I2C_SR2_MSL))
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	699b      	ldr	r3, [r3, #24]
 80006b8:	f003 0301 	and.w	r3, r3, #1
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d01f      	beq.n	8000700 <I2C_ClearADDRFlag+0x56>
	{
		//device is in master mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	7f1b      	ldrb	r3, [r3, #28]
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d112      	bne.n	80006ee <I2C_ClearADDRFlag+0x44>
		{
			if(pI2CHandle->RxSize  == 1)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	6a1b      	ldr	r3, [r3, #32]
 80006cc:	2b01      	cmp	r3, #1
 80006ce:	d11f      	bne.n	8000710 <I2C_ClearADDRFlag+0x66>
			{
				//first disable the ack
				I2C_ManageAcking(pI2CHandle->pI2Cx,DISABLE);
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f000 f9a6 	bl	8000a28 <I2C_ManageAcking>

				//clear the ADDR flag ( read SR1 , read SR2)
				dummy_read = pI2CHandle->pI2Cx->SR1;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	695b      	ldr	r3, [r3, #20]
 80006e2:	60fb      	str	r3, [r7, #12]
				dummy_read = pI2CHandle->pI2Cx->SR2;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	699b      	ldr	r3, [r3, #24]
 80006ea:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
		(void)dummy_read;
	}


}
 80006ec:	e010      	b.n	8000710 <I2C_ClearADDRFlag+0x66>
			dummy_read = pI2CHandle->pI2Cx->SR1;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	695b      	ldr	r3, [r3, #20]
 80006f4:	60fb      	str	r3, [r7, #12]
			dummy_read = pI2CHandle->pI2Cx->SR2;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	60fb      	str	r3, [r7, #12]
}
 80006fe:	e007      	b.n	8000710 <I2C_ClearADDRFlag+0x66>
		dummy_read = pI2CHandle->pI2Cx->SR1;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	695b      	ldr	r3, [r3, #20]
 8000706:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	699b      	ldr	r3, [r3, #24]
 800070e:	60fb      	str	r3, [r7, #12]
}
 8000710:	bf00      	nop
 8000712:	3710      	adds	r7, #16
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <I2C_GenerateStopCondition>:


 void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_STOP);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	601a      	str	r2, [r3, #0]
}
 800072c:	bf00      	nop
 800072e:	370c      	adds	r7, #12
 8000730:	46bd      	mov	sp, r7
 8000732:	bc80      	pop	{r7}
 8000734:	4770      	bx	lr

08000736 <I2C_PeripheralControl>:
 *
 * @Note              -

 */
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 8000736:	b480      	push	{r7}
 8000738:	b083      	sub	sp, #12
 800073a:	af00      	add	r7, sp, #0
 800073c:	6078      	str	r0, [r7, #4]
 800073e:	460b      	mov	r3, r1
 8000740:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000742:	78fb      	ldrb	r3, [r7, #3]
 8000744:	2b01      	cmp	r3, #1
 8000746:	d106      	bne.n	8000756 <I2C_PeripheralControl+0x20>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f043 0201 	orr.w	r2, r3, #1
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	601a      	str	r2, [r3, #0]
	}else
	{
		pI2Cx->CR1 &= ~(1 << 0);
	}

}
 8000754:	e005      	b.n	8000762 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << 0);
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	f023 0201 	bic.w	r2, r3, #1
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	601a      	str	r2, [r3, #0]
}
 8000762:	bf00      	nop
 8000764:	370c      	adds	r7, #12
 8000766:	46bd      	mov	sp, r7
 8000768:	bc80      	pop	{r7}
 800076a:	4770      	bx	lr

0800076c <I2C_PeriClockControl>:
 *
 * @Note              -

 */
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
 8000774:	460b      	mov	r3, r1
 8000776:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000778:	78fb      	ldrb	r3, [r7, #3]
 800077a:	2b01      	cmp	r3, #1
 800077c:	d11f      	bne.n	80007be <I2C_PeriClockControl+0x52>
	{
		if(pI2Cx == I2C1)
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	4a11      	ldr	r2, [pc, #68]	; (80007c8 <I2C_PeriClockControl+0x5c>)
 8000782:	4293      	cmp	r3, r2
 8000784:	d106      	bne.n	8000794 <I2C_PeriClockControl+0x28>
		{
			I2C1_PCLK_EN();
 8000786:	4b11      	ldr	r3, [pc, #68]	; (80007cc <I2C_PeriClockControl+0x60>)
 8000788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078a:	4a10      	ldr	r2, [pc, #64]	; (80007cc <I2C_PeriClockControl+0x60>)
 800078c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000790:	6413      	str	r3, [r2, #64]	; 0x40
	else
	{
		//TODO
	}

}
 8000792:	e014      	b.n	80007be <I2C_PeriClockControl+0x52>
		}else if (pI2Cx == I2C2)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	4a0e      	ldr	r2, [pc, #56]	; (80007d0 <I2C_PeriClockControl+0x64>)
 8000798:	4293      	cmp	r3, r2
 800079a:	d106      	bne.n	80007aa <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 800079c:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <I2C_PeriClockControl+0x60>)
 800079e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a0:	4a0a      	ldr	r2, [pc, #40]	; (80007cc <I2C_PeriClockControl+0x60>)
 80007a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007a6:	6413      	str	r3, [r2, #64]	; 0x40
}
 80007a8:	e009      	b.n	80007be <I2C_PeriClockControl+0x52>
		}else if (pI2Cx == I2C3)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	4a09      	ldr	r2, [pc, #36]	; (80007d4 <I2C_PeriClockControl+0x68>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d105      	bne.n	80007be <I2C_PeriClockControl+0x52>
			I2C3_PCLK_EN();
 80007b2:	4b06      	ldr	r3, [pc, #24]	; (80007cc <I2C_PeriClockControl+0x60>)
 80007b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b6:	4a05      	ldr	r2, [pc, #20]	; (80007cc <I2C_PeriClockControl+0x60>)
 80007b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80007bc:	6413      	str	r3, [r2, #64]	; 0x40
}
 80007be:	bf00      	nop
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bc80      	pop	{r7}
 80007c6:	4770      	bx	lr
 80007c8:	40005400 	.word	0x40005400
 80007cc:	40023800 	.word	0x40023800
 80007d0:	40005800 	.word	0x40005800
 80007d4:	40005c00 	.word	0x40005c00

080007d8 <I2C_Init>:
 *
 * @Note              -

 */
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0 ;
 80007e0:	2300      	movs	r3, #0
 80007e2:	60fb      	str	r3, [r7, #12]

	//enable the clock for the i2cx peripheral
	I2C_PeriClockControl(pI2CHandle->pI2Cx,ENABLE);
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	2101      	movs	r1, #1
 80007ea:	4618      	mov	r0, r3
 80007ec:	f7ff ffbe 	bl	800076c <I2C_PeriClockControl>

	//ack control bit
	tempreg |= pI2CHandle->I2C_Config.I2C_AckControl << 10;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	7a5b      	ldrb	r3, [r3, #9]
 80007f4:	029b      	lsls	r3, r3, #10
 80007f6:	461a      	mov	r2, r3
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	4313      	orrs	r3, r2
 80007fc:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 = tempreg;
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	68fa      	ldr	r2, [r7, #12]
 8000804:	601a      	str	r2, [r3, #0]

	//configure the FREQ field of CR2
	tempreg = 0;
 8000806:	2300      	movs	r3, #0
 8000808:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value() /1000000U ;
 800080a:	f000 f929 	bl	8000a60 <RCC_GetPCLK1Value>
 800080e:	4602      	mov	r2, r0
 8000810:	4b47      	ldr	r3, [pc, #284]	; (8000930 <I2C_Init+0x158>)
 8000812:	fba3 2302 	umull	r2, r3, r3, r2
 8000816:	0c9b      	lsrs	r3, r3, #18
 8000818:	68fa      	ldr	r2, [r7, #12]
 800081a:	4313      	orrs	r3, r2
 800081c:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 =  (tempreg & 0x3F);
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	68fa      	ldr	r2, [r7, #12]
 8000824:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000828:	605a      	str	r2, [r3, #4]

   //program the device own address
	tempreg = 0;
 800082a:	2300      	movs	r3, #0
 800082c:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	7a1b      	ldrb	r3, [r3, #8]
 8000832:	005b      	lsls	r3, r3, #1
 8000834:	461a      	mov	r2, r3
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	4313      	orrs	r3, r2
 800083a:	60fb      	str	r3, [r7, #12]
	tempreg |= ( 1 << 14);
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000842:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	68fa      	ldr	r2, [r7, #12]
 800084a:	609a      	str	r2, [r3, #8]

	//CCR calculations
	uint16_t ccr_value = 0;
 800084c:	2300      	movs	r3, #0
 800084e:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 8000850:	2300      	movs	r3, #0
 8000852:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	685b      	ldr	r3, [r3, #4]
 8000858:	4a36      	ldr	r2, [pc, #216]	; (8000934 <I2C_Init+0x15c>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d80f      	bhi.n	800087e <I2C_Init+0xa6>
	{
		//mode is standard mode
		ccr_value = (RCC_GetPCLK1Value() / ( 2 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 800085e:	f000 f8ff 	bl	8000a60 <RCC_GetPCLK1Value>
 8000862:	4602      	mov	r2, r0
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	685b      	ldr	r3, [r3, #4]
 8000868:	005b      	lsls	r3, r3, #1
 800086a:	fbb2 f3f3 	udiv	r3, r2, r3
 800086e:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 8000870:	897b      	ldrh	r3, [r7, #10]
 8000872:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000876:	68fa      	ldr	r2, [r7, #12]
 8000878:	4313      	orrs	r3, r2
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	e02d      	b.n	80008da <I2C_Init+0x102>
	}else
	{
		//mode is fast mode
		tempreg |= ( 1 << 15);
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000884:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	7a9b      	ldrb	r3, [r3, #10]
 800088a:	039b      	lsls	r3, r3, #14
 800088c:	461a      	mov	r2, r3
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	4313      	orrs	r3, r2
 8000892:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	7a9b      	ldrb	r3, [r3, #10]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d10b      	bne.n	80008b4 <I2C_Init+0xdc>
		{
			ccr_value = (RCC_GetPCLK1Value() / ( 3 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 800089c:	f000 f8e0 	bl	8000a60 <RCC_GetPCLK1Value>
 80008a0:	4601      	mov	r1, r0
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	685a      	ldr	r2, [r3, #4]
 80008a6:	4613      	mov	r3, r2
 80008a8:	005b      	lsls	r3, r3, #1
 80008aa:	4413      	add	r3, r2
 80008ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80008b0:	817b      	strh	r3, [r7, #10]
 80008b2:	e00c      	b.n	80008ce <I2C_Init+0xf6>
		}else
		{
			ccr_value = (RCC_GetPCLK1Value() / ( 25 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 80008b4:	f000 f8d4 	bl	8000a60 <RCC_GetPCLK1Value>
 80008b8:	4601      	mov	r1, r0
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	685a      	ldr	r2, [r3, #4]
 80008be:	4613      	mov	r3, r2
 80008c0:	009b      	lsls	r3, r3, #2
 80008c2:	4413      	add	r3, r2
 80008c4:	009a      	lsls	r2, r3, #2
 80008c6:	4413      	add	r3, r2
 80008c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80008cc:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= (ccr_value & 0xFFF);
 80008ce:	897b      	ldrh	r3, [r7, #10]
 80008d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80008d4:	68fa      	ldr	r2, [r7, #12]
 80008d6:	4313      	orrs	r3, r2
 80008d8:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	68fa      	ldr	r2, [r7, #12]
 80008e0:	61da      	str	r2, [r3, #28]

	//TRISE Configuration
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	4a13      	ldr	r2, [pc, #76]	; (8000934 <I2C_Init+0x15c>)
 80008e8:	4293      	cmp	r3, r2
 80008ea:	d809      	bhi.n	8000900 <I2C_Init+0x128>
	{
		//mode is standard mode

		tempreg = (RCC_GetPCLK1Value() /1000000U) + 1 ;
 80008ec:	f000 f8b8 	bl	8000a60 <RCC_GetPCLK1Value>
 80008f0:	4602      	mov	r2, r0
 80008f2:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <I2C_Init+0x158>)
 80008f4:	fba3 2302 	umull	r2, r3, r3, r2
 80008f8:	0c9b      	lsrs	r3, r3, #18
 80008fa:	3301      	adds	r3, #1
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	e00d      	b.n	800091c <I2C_Init+0x144>

	}else
	{
		//mode is fast mode
		tempreg = ( (RCC_GetPCLK1Value() * 300) / 1000000000U ) + 1;
 8000900:	f000 f8ae 	bl	8000a60 <RCC_GetPCLK1Value>
 8000904:	4602      	mov	r2, r0
 8000906:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800090a:	fb03 f302 	mul.w	r3, r3, r2
 800090e:	0a5b      	lsrs	r3, r3, #9
 8000910:	4a09      	ldr	r2, [pc, #36]	; (8000938 <I2C_Init+0x160>)
 8000912:	fba2 2303 	umull	r2, r3, r2, r3
 8000916:	09db      	lsrs	r3, r3, #7
 8000918:	3301      	adds	r3, #1
 800091a:	60fb      	str	r3, [r7, #12]

	}

	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	68fa      	ldr	r2, [r7, #12]
 8000922:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000926:	621a      	str	r2, [r3, #32]

}
 8000928:	bf00      	nop
 800092a:	3710      	adds	r7, #16
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	431bde83 	.word	0x431bde83
 8000934:	000186a0 	.word	0x000186a0
 8000938:	00044b83 	.word	0x00044b83

0800093c <I2C_GetFlagStatus>:

}


uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx , uint32_t FlagName)
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	6039      	str	r1, [r7, #0]
	if(pI2Cx->SR1 & FlagName)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	695a      	ldr	r2, [r3, #20]
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	4013      	ands	r3, r2
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <I2C_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000952:	2301      	movs	r3, #1
 8000954:	e000      	b.n	8000958 <I2C_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000956:	2300      	movs	r3, #0
}
 8000958:	4618      	mov	r0, r3
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	bc80      	pop	{r7}
 8000960:	4770      	bx	lr

08000962 <I2C_MasterSendData>:



void I2C_MasterSendData(I2C_Handle_t *pI2CHandle,uint8_t *pTxbuffer, uint32_t Len, uint8_t SlaveAddr,uint8_t Sr)
{
 8000962:	b580      	push	{r7, lr}
 8000964:	b084      	sub	sp, #16
 8000966:	af00      	add	r7, sp, #0
 8000968:	60f8      	str	r0, [r7, #12]
 800096a:	60b9      	str	r1, [r7, #8]
 800096c:	607a      	str	r2, [r7, #4]
 800096e:	70fb      	strb	r3, [r7, #3]
	// 1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff fe74 	bl	8000662 <I2C_GenerateStartCondition>

	//2. confirm that start generation is completed by checking the SB flag in the SR1
	//   Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_SB)   );
 800097a:	bf00      	nop
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	2101      	movs	r1, #1
 8000982:	4618      	mov	r0, r3
 8000984:	f7ff ffda 	bl	800093c <I2C_GetFlagStatus>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d0f6      	beq.n	800097c <I2C_MasterSendData+0x1a>

	//3. Send the address of the slave with r/nw bit set to w(0) (total 8 bits )
	I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx,SlaveAddr);
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	78fa      	ldrb	r2, [r7, #3]
 8000994:	4611      	mov	r1, r2
 8000996:	4618      	mov	r0, r3
 8000998:	f7ff fe72 	bl	8000680 <I2C_ExecuteAddressPhaseWrite>

	//4. Confirm that address phase is completed by checking the ADDR flag in teh SR1
	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_ADDR)   );
 800099c:	bf00      	nop
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	2102      	movs	r1, #2
 80009a4:	4618      	mov	r0, r3
 80009a6:	f7ff ffc9 	bl	800093c <I2C_GetFlagStatus>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d0f6      	beq.n	800099e <I2C_MasterSendData+0x3c>

	//5. clear the ADDR flag according to its software sequence
	//   Note: Until ADDR is cleared SCL will be stretched (pulled to LOW)
	I2C_ClearADDRFlag(pI2CHandle);
 80009b0:	68f8      	ldr	r0, [r7, #12]
 80009b2:	f7ff fe7a 	bl	80006aa <I2C_ClearADDRFlag>

	//6. send the data until len becomes 0

	while(Len > 0)
 80009b6:	e014      	b.n	80009e2 <I2C_MasterSendData+0x80>
	{
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_TXE) ); //Wait till TXE is set
 80009b8:	bf00      	nop
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	2180      	movs	r1, #128	; 0x80
 80009c0:	4618      	mov	r0, r3
 80009c2:	f7ff ffbb 	bl	800093c <I2C_GetFlagStatus>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d0f6      	beq.n	80009ba <I2C_MasterSendData+0x58>
		pI2CHandle->pI2Cx->DR = *pTxbuffer;
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	781a      	ldrb	r2, [r3, #0]
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	611a      	str	r2, [r3, #16]
		pTxbuffer++;
 80009d6:	68bb      	ldr	r3, [r7, #8]
 80009d8:	3301      	adds	r3, #1
 80009da:	60bb      	str	r3, [r7, #8]
		Len--;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	3b01      	subs	r3, #1
 80009e0:	607b      	str	r3, [r7, #4]
	while(Len > 0)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d1e7      	bne.n	80009b8 <I2C_MasterSendData+0x56>

	//7. when Len becomes zero wait for TXE=1 and BTF=1 before generating the STOP condition
	//   Note: TXE=1 , BTF=1 , means that both SR and DR are empty and next transmission should begin
	//   when BTF=1 SCL will be stretched (pulled to LOW)

	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_TXE) );
 80009e8:	bf00      	nop
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	2180      	movs	r1, #128	; 0x80
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff ffa3 	bl	800093c <I2C_GetFlagStatus>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d0f6      	beq.n	80009ea <I2C_MasterSendData+0x88>

	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_BTF) );
 80009fc:	bf00      	nop
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	2104      	movs	r1, #4
 8000a04:	4618      	mov	r0, r3
 8000a06:	f7ff ff99 	bl	800093c <I2C_GetFlagStatus>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d0f6      	beq.n	80009fe <I2C_MasterSendData+0x9c>


	//8. Generate STOP condition and master need not to wait for the completion of stop condition.
	//   Note: generating STOP, automatically clears the BTF
	if(Sr == I2C_DISABLE_SR )
 8000a10:	7e3b      	ldrb	r3, [r7, #24]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d104      	bne.n	8000a20 <I2C_MasterSendData+0xbe>
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f7ff fe7c 	bl	8000718 <I2C_GenerateStopCondition>

}
 8000a20:	bf00      	nop
 8000a22:	3710      	adds	r7, #16
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <I2C_ManageAcking>:

}


void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
 8000a30:	460b      	mov	r3, r1
 8000a32:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == I2C_ACK_ENABLE)
 8000a34:	78fb      	ldrb	r3, [r7, #3]
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d106      	bne.n	8000a48 <I2C_ManageAcking+0x20>
	{
		//enable the ack
		pI2Cx->CR1 |= ( 1 << I2C_CR1_ACK);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	601a      	str	r2, [r3, #0]
	}else
	{
		//disable the ack
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
	}
}
 8000a46:	e005      	b.n	8000a54 <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	601a      	str	r2, [r3, #0]
}
 8000a54:	bf00      	nop
 8000a56:	370c      	adds	r7, #12
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bc80      	pop	{r7}
 8000a5c:	4770      	bx	lr
	...

08000a60 <RCC_GetPCLK1Value>:
uint8_t APB1_PreScaler[4] = { 2, 4 , 8, 16};



uint32_t RCC_GetPCLK1Value(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0
	uint32_t pclk1,SystemClk;

	uint8_t clksrc,temp,ahbp,apb1p;

	clksrc = ((RCC->CFGR >> 2) & 0x3);
 8000a66:	4b25      	ldr	r3, [pc, #148]	; (8000afc <RCC_GetPCLK1Value+0x9c>)
 8000a68:	689b      	ldr	r3, [r3, #8]
 8000a6a:	089b      	lsrs	r3, r3, #2
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	f003 0303 	and.w	r3, r3, #3
 8000a72:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0 )
 8000a74:	7a7b      	ldrb	r3, [r7, #9]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d102      	bne.n	8000a80 <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;
 8000a7a:	4b21      	ldr	r3, [pc, #132]	; (8000b00 <RCC_GetPCLK1Value+0xa0>)
 8000a7c:	60fb      	str	r3, [r7, #12]
 8000a7e:	e00b      	b.n	8000a98 <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 1)
 8000a80:	7a7b      	ldrb	r3, [r7, #9]
 8000a82:	2b01      	cmp	r3, #1
 8000a84:	d102      	bne.n	8000a8c <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;
 8000a86:	4b1f      	ldr	r3, [pc, #124]	; (8000b04 <RCC_GetPCLK1Value+0xa4>)
 8000a88:	60fb      	str	r3, [r7, #12]
 8000a8a:	e005      	b.n	8000a98 <RCC_GetPCLK1Value+0x38>
	}else if (clksrc == 2)
 8000a8c:	7a7b      	ldrb	r3, [r7, #9]
 8000a8e:	2b02      	cmp	r3, #2
 8000a90:	d102      	bne.n	8000a98 <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GetPLLOutputClock();
 8000a92:	f000 f83d 	bl	8000b10 <RCC_GetPLLOutputClock>
 8000a96:	60f8      	str	r0, [r7, #12]
	}

	//for ahb
	temp = ((RCC->CFGR >> 4 ) & 0xF);
 8000a98:	4b18      	ldr	r3, [pc, #96]	; (8000afc <RCC_GetPCLK1Value+0x9c>)
 8000a9a:	689b      	ldr	r3, [r3, #8]
 8000a9c:	091b      	lsrs	r3, r3, #4
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	f003 030f 	and.w	r3, r3, #15
 8000aa4:	723b      	strb	r3, [r7, #8]

	if(temp < 8)
 8000aa6:	7a3b      	ldrb	r3, [r7, #8]
 8000aa8:	2b07      	cmp	r3, #7
 8000aaa:	d802      	bhi.n	8000ab2 <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 8000aac:	2301      	movs	r3, #1
 8000aae:	72fb      	strb	r3, [r7, #11]
 8000ab0:	e005      	b.n	8000abe <RCC_GetPCLK1Value+0x5e>
	}else
	{
		ahbp = AHB_PreScaler[temp-8];
 8000ab2:	7a3b      	ldrb	r3, [r7, #8]
 8000ab4:	3b08      	subs	r3, #8
 8000ab6:	4a14      	ldr	r2, [pc, #80]	; (8000b08 <RCC_GetPCLK1Value+0xa8>)
 8000ab8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000abc:	72fb      	strb	r3, [r7, #11]
	}



	//apb1
	temp = ((RCC->CFGR >> 10 ) & 0x7);
 8000abe:	4b0f      	ldr	r3, [pc, #60]	; (8000afc <RCC_GetPCLK1Value+0x9c>)
 8000ac0:	689b      	ldr	r3, [r3, #8]
 8000ac2:	0a9b      	lsrs	r3, r3, #10
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	f003 0307 	and.w	r3, r3, #7
 8000aca:	723b      	strb	r3, [r7, #8]

	if(temp < 4)
 8000acc:	7a3b      	ldrb	r3, [r7, #8]
 8000ace:	2b03      	cmp	r3, #3
 8000ad0:	d802      	bhi.n	8000ad8 <RCC_GetPCLK1Value+0x78>
	{
		apb1p = 1;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	72bb      	strb	r3, [r7, #10]
 8000ad6:	e004      	b.n	8000ae2 <RCC_GetPCLK1Value+0x82>
	}else
	{
		apb1p = APB1_PreScaler[temp-4];
 8000ad8:	7a3b      	ldrb	r3, [r7, #8]
 8000ada:	3b04      	subs	r3, #4
 8000adc:	4a0b      	ldr	r2, [pc, #44]	; (8000b0c <RCC_GetPCLK1Value+0xac>)
 8000ade:	5cd3      	ldrb	r3, [r2, r3]
 8000ae0:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 =  (SystemClk / ahbp) /apb1p;
 8000ae2:	7afb      	ldrb	r3, [r7, #11]
 8000ae4:	68fa      	ldr	r2, [r7, #12]
 8000ae6:	fbb2 f2f3 	udiv	r2, r2, r3
 8000aea:	7abb      	ldrb	r3, [r7, #10]
 8000aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8000af0:	607b      	str	r3, [r7, #4]

	return pclk1;
 8000af2:	687b      	ldr	r3, [r7, #4]
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	3710      	adds	r7, #16
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	40023800 	.word	0x40023800
 8000b00:	00f42400 	.word	0x00f42400
 8000b04:	007a1200 	.word	0x007a1200
 8000b08:	20000000 	.word	0x20000000
 8000b0c:	20000010 	.word	0x20000010

08000b10 <RCC_GetPLLOutputClock>:

	return pclk2;
}

uint32_t  RCC_GetPLLOutputClock()
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0

	return 0;
 8000b14:	2300      	movs	r3, #0
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bc80      	pop	{r7}
 8000b1c:	4770      	bx	lr
	...

08000b20 <delay>:
#define MY_ADDR 0x61;

#define SLAVE_ADDR  0x68

void delay(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
 8000b26:	2300      	movs	r3, #0
 8000b28:	607b      	str	r3, [r7, #4]
 8000b2a:	e002      	b.n	8000b32 <delay+0x12>
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	3301      	adds	r3, #1
 8000b30:	607b      	str	r3, [r7, #4]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4a03      	ldr	r2, [pc, #12]	; (8000b44 <delay+0x24>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d9f8      	bls.n	8000b2c <delay+0xc>
}
 8000b3a:	bf00      	nop
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bc80      	pop	{r7}
 8000b42:	4770      	bx	lr
 8000b44:	0003d08f 	.word	0x0003d08f

08000b48 <I2C1_GPIOInits>:
 * PB6-> SCL
 * PB9 or PB7 -> SDA
 */

void I2C1_GPIOInits(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2CPins;

	/*Note : Internal pull-up resistors are used */

	I2CPins.pGPIOx = GPIOB;
 8000b4e:	4b0e      	ldr	r3, [pc, #56]	; (8000b88 <I2C1_GPIOInits+0x40>)
 8000b50:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000b52:	2302      	movs	r3, #2
 8000b54:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000b56:	2301      	movs	r3, #1
 8000b58:	733b      	strb	r3, [r7, #12]
	/*
	 * Note : In the below line use GPIO_NO_PUPD option if you want to use external pullup resistors, then you have to use 3.3K pull up resistors
	 * for both SDA and SCL lines
	 */
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8000b5e:	2304      	movs	r3, #4
 8000b60:	737b      	strb	r3, [r7, #13]
	I2CPins. GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000b62:	2302      	movs	r3, #2
 8000b64:	72bb      	strb	r3, [r7, #10]

	//scl
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 8000b66:	2306      	movs	r3, #6
 8000b68:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8000b6a:	1d3b      	adds	r3, r7, #4
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f7ff fbc7 	bl	8000300 <GPIO_Init>


	//sda
	//Note : since we found a glitch on PB9 , you can also try with PB7
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_9;
 8000b72:	2309      	movs	r3, #9
 8000b74:	723b      	strb	r3, [r7, #8]

	GPIO_Init(&I2CPins);
 8000b76:	1d3b      	adds	r3, r7, #4
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff fbc1 	bl	8000300 <GPIO_Init>


}
 8000b7e:	bf00      	nop
 8000b80:	3710      	adds	r7, #16
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40020400 	.word	0x40020400

08000b8c <I2C1_Inits>:

void I2C1_Inits(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
	I2C1Handle.pI2Cx = I2C1;
 8000b90:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <I2C1_Inits+0x2c>)
 8000b92:	4a0a      	ldr	r2, [pc, #40]	; (8000bbc <I2C1_Inits+0x30>)
 8000b94:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 8000b96:	4b08      	ldr	r3, [pc, #32]	; (8000bb8 <I2C1_Inits+0x2c>)
 8000b98:	2201      	movs	r2, #1
 8000b9a:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2C_Config.I2C_DeviceAddress = MY_ADDR;
 8000b9c:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <I2C1_Inits+0x2c>)
 8000b9e:	2261      	movs	r2, #97	; 0x61
 8000ba0:	721a      	strb	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 8000ba2:	4b05      	ldr	r3, [pc, #20]	; (8000bb8 <I2C1_Inits+0x2c>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	729a      	strb	r2, [r3, #10]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 8000ba8:	4b03      	ldr	r3, [pc, #12]	; (8000bb8 <I2C1_Inits+0x2c>)
 8000baa:	4a05      	ldr	r2, [pc, #20]	; (8000bc0 <I2C1_Inits+0x34>)
 8000bac:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C1Handle);
 8000bae:	4802      	ldr	r0, [pc, #8]	; (8000bb8 <I2C1_Inits+0x2c>)
 8000bb0:	f7ff fe12 	bl	80007d8 <I2C_Init>

}
 8000bb4:	bf00      	nop
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	20000480 	.word	0x20000480
 8000bbc:	40005400 	.word	0x40005400
 8000bc0:	000186a0 	.word	0x000186a0

08000bc4 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn;

	//this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOA;
 8000bca:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <GPIO_ButtonInit+0x2c>)
 8000bcc:	607b      	str	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	723b      	strb	r3, [r7, #8]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	727b      	strb	r3, [r7, #9]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	72bb      	strb	r3, [r7, #10]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GPIOBtn);
 8000bde:	1d3b      	adds	r3, r7, #4
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff fb8d 	bl	8000300 <GPIO_Init>

}
 8000be6:	bf00      	nop
 8000be8:	3710      	adds	r7, #16
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40020000 	.word	0x40020000

08000bf4 <main>:


int main(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af02      	add	r7, sp, #8

	GPIO_ButtonInit();
 8000bfa:	f7ff ffe3 	bl	8000bc4 <GPIO_ButtonInit>

	//i2c pin inits
	I2C1_GPIOInits();
 8000bfe:	f7ff ffa3 	bl	8000b48 <I2C1_GPIOInits>

	//i2c peripheral configuration
	I2C1_Inits();
 8000c02:	f7ff ffc3 	bl	8000b8c <I2C1_Inits>

	//enable the i2c peripheral
	I2C_PeripheralControl(I2C1,ENABLE);
 8000c06:	2101      	movs	r1, #1
 8000c08:	480c      	ldr	r0, [pc, #48]	; (8000c3c <main+0x48>)
 8000c0a:	f7ff fd94 	bl	8000736 <I2C_PeripheralControl>

	while(1)
	{
		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 8000c0e:	bf00      	nop
 8000c10:	2100      	movs	r1, #0
 8000c12:	480b      	ldr	r0, [pc, #44]	; (8000c40 <main+0x4c>)
 8000c14:	f7ff fd10 	bl	8000638 <GPIO_ReadFromInputPin>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d0f8      	beq.n	8000c10 <main+0x1c>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 8000c1e:	f7ff ff7f 	bl	8000b20 <delay>

		//send some data to the slave
		I2C_MasterSendData(&I2C1Handle,some_data,strlen((char*)some_data),SLAVE_ADDR,0);
 8000c22:	4808      	ldr	r0, [pc, #32]	; (8000c44 <main+0x50>)
 8000c24:	f7ff fae0 	bl	80001e8 <strlen>
 8000c28:	4602      	mov	r2, r0
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	9300      	str	r3, [sp, #0]
 8000c2e:	2368      	movs	r3, #104	; 0x68
 8000c30:	4904      	ldr	r1, [pc, #16]	; (8000c44 <main+0x50>)
 8000c32:	4805      	ldr	r0, [pc, #20]	; (8000c48 <main+0x54>)
 8000c34:	f7ff fe95 	bl	8000962 <I2C_MasterSendData>
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 8000c38:	e7e9      	b.n	8000c0e <main+0x1a>
 8000c3a:	bf00      	nop
 8000c3c:	40005400 	.word	0x40005400
 8000c40:	40020000 	.word	0x40020000
 8000c44:	20000014 	.word	0x20000014
 8000c48:	20000480 	.word	0x20000480

08000c4c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c4c:	480d      	ldr	r0, [pc, #52]	; (8000c84 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c4e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c50:	480d      	ldr	r0, [pc, #52]	; (8000c88 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c52:	490e      	ldr	r1, [pc, #56]	; (8000c8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c54:	4a0e      	ldr	r2, [pc, #56]	; (8000c90 <LoopForever+0xe>)
  movs r3, #0
 8000c56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c58:	e002      	b.n	8000c60 <LoopCopyDataInit>

08000c5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c5e:	3304      	adds	r3, #4

08000c60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c64:	d3f9      	bcc.n	8000c5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c66:	4a0b      	ldr	r2, [pc, #44]	; (8000c94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c68:	4c0b      	ldr	r4, [pc, #44]	; (8000c98 <LoopForever+0x16>)
  movs r3, #0
 8000c6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c6c:	e001      	b.n	8000c72 <LoopFillZerobss>

08000c6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c70:	3204      	adds	r2, #4

08000c72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c74:	d3fb      	bcc.n	8000c6e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000c76:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8000c7a:	f000 f811 	bl	8000ca0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c7e:	f7ff ffb9 	bl	8000bf4 <main>

08000c82 <LoopForever>:

LoopForever:
    b LoopForever
 8000c82:	e7fe      	b.n	8000c82 <LoopForever>
  ldr   r0, =_estack
 8000c84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c8c:	20000464 	.word	0x20000464
  ldr r2, =_sidata
 8000c90:	08000e08 	.word	0x08000e08
  ldr r2, =_sbss
 8000c94:	20000464 	.word	0x20000464
  ldr r4, =_ebss
 8000c98:	200004b4 	.word	0x200004b4

08000c9c <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c9c:	e7fe      	b.n	8000c9c <ADC_IRQHandler>
	...

08000ca0 <__libc_init_array>:
 8000ca0:	b570      	push	{r4, r5, r6, lr}
 8000ca2:	4e0d      	ldr	r6, [pc, #52]	; (8000cd8 <__libc_init_array+0x38>)
 8000ca4:	4c0d      	ldr	r4, [pc, #52]	; (8000cdc <__libc_init_array+0x3c>)
 8000ca6:	1ba4      	subs	r4, r4, r6
 8000ca8:	10a4      	asrs	r4, r4, #2
 8000caa:	2500      	movs	r5, #0
 8000cac:	42a5      	cmp	r5, r4
 8000cae:	d109      	bne.n	8000cc4 <__libc_init_array+0x24>
 8000cb0:	4e0b      	ldr	r6, [pc, #44]	; (8000ce0 <__libc_init_array+0x40>)
 8000cb2:	4c0c      	ldr	r4, [pc, #48]	; (8000ce4 <__libc_init_array+0x44>)
 8000cb4:	f000 f894 	bl	8000de0 <_init>
 8000cb8:	1ba4      	subs	r4, r4, r6
 8000cba:	10a4      	asrs	r4, r4, #2
 8000cbc:	2500      	movs	r5, #0
 8000cbe:	42a5      	cmp	r5, r4
 8000cc0:	d105      	bne.n	8000cce <__libc_init_array+0x2e>
 8000cc2:	bd70      	pop	{r4, r5, r6, pc}
 8000cc4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000cc8:	4798      	blx	r3
 8000cca:	3501      	adds	r5, #1
 8000ccc:	e7ee      	b.n	8000cac <__libc_init_array+0xc>
 8000cce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000cd2:	4798      	blx	r3
 8000cd4:	3501      	adds	r5, #1
 8000cd6:	e7f2      	b.n	8000cbe <__libc_init_array+0x1e>
 8000cd8:	08000dfc 	.word	0x08000dfc
 8000cdc:	08000dfc 	.word	0x08000dfc
 8000ce0:	08000dfc 	.word	0x08000dfc
 8000ce4:	08000e04 	.word	0x08000e04

08000ce8 <register_fini>:
 8000ce8:	4b02      	ldr	r3, [pc, #8]	; (8000cf4 <register_fini+0xc>)
 8000cea:	b113      	cbz	r3, 8000cf2 <register_fini+0xa>
 8000cec:	4802      	ldr	r0, [pc, #8]	; (8000cf8 <register_fini+0x10>)
 8000cee:	f000 b805 	b.w	8000cfc <atexit>
 8000cf2:	4770      	bx	lr
 8000cf4:	00000000 	.word	0x00000000
 8000cf8:	08000d09 	.word	0x08000d09

08000cfc <atexit>:
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4601      	mov	r1, r0
 8000d00:	461a      	mov	r2, r3
 8000d02:	4618      	mov	r0, r3
 8000d04:	f000 b816 	b.w	8000d34 <__register_exitproc>

08000d08 <__libc_fini_array>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	4d07      	ldr	r5, [pc, #28]	; (8000d28 <__libc_fini_array+0x20>)
 8000d0c:	4c07      	ldr	r4, [pc, #28]	; (8000d2c <__libc_fini_array+0x24>)
 8000d0e:	1b64      	subs	r4, r4, r5
 8000d10:	10a4      	asrs	r4, r4, #2
 8000d12:	b91c      	cbnz	r4, 8000d1c <__libc_fini_array+0x14>
 8000d14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d18:	f000 b868 	b.w	8000dec <_fini>
 8000d1c:	3c01      	subs	r4, #1
 8000d1e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8000d22:	4798      	blx	r3
 8000d24:	e7f5      	b.n	8000d12 <__libc_fini_array+0xa>
 8000d26:	bf00      	nop
 8000d28:	08000e04 	.word	0x08000e04
 8000d2c:	08000e08 	.word	0x08000e08

08000d30 <__retarget_lock_acquire_recursive>:
 8000d30:	4770      	bx	lr

08000d32 <__retarget_lock_release_recursive>:
 8000d32:	4770      	bx	lr

08000d34 <__register_exitproc>:
 8000d34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000d38:	4c26      	ldr	r4, [pc, #152]	; (8000dd4 <__register_exitproc+0xa0>)
 8000d3a:	4606      	mov	r6, r0
 8000d3c:	6820      	ldr	r0, [r4, #0]
 8000d3e:	4698      	mov	r8, r3
 8000d40:	460f      	mov	r7, r1
 8000d42:	4691      	mov	r9, r2
 8000d44:	f7ff fff4 	bl	8000d30 <__retarget_lock_acquire_recursive>
 8000d48:	4b23      	ldr	r3, [pc, #140]	; (8000dd8 <__register_exitproc+0xa4>)
 8000d4a:	681d      	ldr	r5, [r3, #0]
 8000d4c:	f8d5 0148 	ldr.w	r0, [r5, #328]	; 0x148
 8000d50:	b918      	cbnz	r0, 8000d5a <__register_exitproc+0x26>
 8000d52:	f505 70a6 	add.w	r0, r5, #332	; 0x14c
 8000d56:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 8000d5a:	6843      	ldr	r3, [r0, #4]
 8000d5c:	2b1f      	cmp	r3, #31
 8000d5e:	dd19      	ble.n	8000d94 <__register_exitproc+0x60>
 8000d60:	4b1e      	ldr	r3, [pc, #120]	; (8000ddc <__register_exitproc+0xa8>)
 8000d62:	b933      	cbnz	r3, 8000d72 <__register_exitproc+0x3e>
 8000d64:	6820      	ldr	r0, [r4, #0]
 8000d66:	f7ff ffe4 	bl	8000d32 <__retarget_lock_release_recursive>
 8000d6a:	f04f 30ff 	mov.w	r0, #4294967295
 8000d6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000d72:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000d76:	f3af 8000 	nop.w
 8000d7a:	2800      	cmp	r0, #0
 8000d7c:	d0f2      	beq.n	8000d64 <__register_exitproc+0x30>
 8000d7e:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 8000d82:	6003      	str	r3, [r0, #0]
 8000d84:	2200      	movs	r2, #0
 8000d86:	6042      	str	r2, [r0, #4]
 8000d88:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 8000d8c:	f8c0 2188 	str.w	r2, [r0, #392]	; 0x188
 8000d90:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
 8000d94:	6843      	ldr	r3, [r0, #4]
 8000d96:	b19e      	cbz	r6, 8000dc0 <__register_exitproc+0x8c>
 8000d98:	eb00 0583 	add.w	r5, r0, r3, lsl #2
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
 8000da2:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
 8000da6:	409a      	lsls	r2, r3
 8000da8:	4311      	orrs	r1, r2
 8000daa:	2e02      	cmp	r6, #2
 8000dac:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
 8000db0:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
 8000db4:	bf02      	ittt	eq
 8000db6:	f8d0 118c 	ldreq.w	r1, [r0, #396]	; 0x18c
 8000dba:	430a      	orreq	r2, r1
 8000dbc:	f8c0 218c 	streq.w	r2, [r0, #396]	; 0x18c
 8000dc0:	1c5a      	adds	r2, r3, #1
 8000dc2:	3302      	adds	r3, #2
 8000dc4:	6042      	str	r2, [r0, #4]
 8000dc6:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
 8000dca:	6820      	ldr	r0, [r4, #0]
 8000dcc:	f7ff ffb1 	bl	8000d32 <__retarget_lock_release_recursive>
 8000dd0:	2000      	movs	r0, #0
 8000dd2:	e7cc      	b.n	8000d6e <__register_exitproc+0x3a>
 8000dd4:	20000460 	.word	0x20000460
 8000dd8:	08000df8 	.word	0x08000df8
 8000ddc:	00000000 	.word	0x00000000

08000de0 <_init>:
 8000de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000de2:	bf00      	nop
 8000de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000de6:	bc08      	pop	{r3}
 8000de8:	469e      	mov	lr, r3
 8000dea:	4770      	bx	lr

08000dec <_fini>:
 8000dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dee:	bf00      	nop
 8000df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000df2:	bc08      	pop	{r3}
 8000df4:	469e      	mov	lr, r3
 8000df6:	4770      	bx	lr
